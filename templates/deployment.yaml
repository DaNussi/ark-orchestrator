{{- range $map := .Values.game.maps }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}-map-{{ $map.names.k8s }}-pod
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ $.Release.Name }}-map-{{ $map.names.k8s }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $.Release.Name }}-map-{{ $map.names.k8s }}
  serviceName: {{ $.Release.Name }}-map-{{ $map.names.k8s }}-svc
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $.Release.Name }}-map-{{ $map.names.k8s }}
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: ark
        image: {{ $.Values.image.repository }}:{{ $.Values.image.tag }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}
        command:
          - "--verbose"
          {{- range $ark := $.Values.game.config.ark }}
          - "--arkopt,{{ $ark }}"
          {{- end}}
          {{- range $arkopt := $.Values.game.config.arkopt }}
          - "--arkopt,-{{ $arkopt }}"
          {{- end}}
          {{- range $arkflag := $.Values.game.config.arkflag }}
          - "--arkopt,-{{ $arkflag }}"
          {{- end}}
        # livenessProbe:
        #   exec:
        #     command:
        #     - runuser -u steam -- /usr/bin/arkmanager status | grep -q '.*Server\ running.*Yes.*'
        #   initialDelaySeconds: 30
        #   timeoutSeconds: 10
        #   periodSeconds: 10
        #   successThreshold: 1
        #   failureThreshold: 360
        # readinessProbe:
        #   exec:
        #     command:
        #     - runuser -u steam -- /usr/bin/arkmanager status | grep -q '.*Server\ listening.*Yes.*'
        #   initialDelaySeconds: 30
        #   timeoutSeconds: 10
        #   periodSeconds: 10
        #   successThreshold: 1
        #   failureThreshold: 360
        envFrom:
          - configMapRef:
              name: {{ $.Release.Name }}-common-config
        env:
          - name: SESSION_NAME
            value: "{{ $.Values.game.name }} - {{$map.names.title}}"
          - name: SERVER_MAP
            value: "{{$map.names.map}}"
          - name: GAME_CLIENT_PORT
            value: "{{ $map.ports.game }}"
          - name: UDP_SOCKET_PORT
            value: "{{ $map.ports.socket }}"
          - name: SERVER_LIST_PORT
            value: "{{ $map.ports.listen }}"
          - name: RCON_PORT
            value: "{{ $map.ports.rcon }}"
          - name: CLUSTER_DIR_OVERRIDE
            value: "/cluster"
        ports:
          - containerPort: {{ $map.ports.game }}
            name: game
          - containerPort: {{ $map.ports.socket }}
            name: socket
          - containerPort: {{ $map.ports.listen }}
            name: listen
          - containerPort: {{ $map.ports.rcon }}
            name: rcon
        volumeMounts:
          - name: data
            mountPath: /app
          - name: cluster
            mountPath: /cluster
          - name: game-config-volume
            mountPath: /app/Game.ini.append
            subPath: Game.ini
          - name: game-config-volume
            mountPath: /app/GameUserSettings.ini.append
            subPath: GameUserSettings.ini
      volumes:
        - name: cluster
          persistentVolumeClaim:
            claimName: {{ $.Release.Name }}-cluster-pvc
        - name: game-config-volume
          configMap:
            name: {{ $.Release.Name }}-game-config
  volumeClaimTemplates:
    - apiVersion: v1	
      kind: PersistentVolumeClaim	
      metadata:
        name: data
      spec:
        {{- with $map.storage }}
            {{- toYaml . | nindent 8 }}
        {{- end }}
  

---
{{- end}}