{{- range $map := .Values.game.maps }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}-map-{{$map.names.k8s}}
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ $.Release.Name }}-map-{{$map.names.k8s}}
  serviceName: {{ $.Release.Name }}-svc-{{$map.names.k8s}}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}-map-{{$map.names.k8s}}
    spec:
      containers:
      - name: ark
        image: {{ $.Values.image.repository }}:{{ $.Values.image.tag }}
        imagePullPolicy: {{ $.Values.image.pullPolicy }}

        envFrom:
        - configMapRef:
            name: {{ $.Release.Name }}-common-config

        env:
        - name: SESSION_NAME
          value: "{{ $.Values.game.name }} - {{$map.names.title}}"
        - name: SERVER_MAP
          value: "{{$map.names.map}}"
        - name: GAME_CLIENT_PORT
          value: "{{ $map.ports.game }}"
        - name: UDP_SOCKET_PORT
          value: "{{ $map.ports.client }}"
        - name: SERVER_LIST_PORT
          value: "{{ $map.ports.listen }}"
        - name: RCON_PORT
          value: "{{ $map.ports.rcon }}"


        ports:
        - containerPort: {{ $map.ports.game }}
          name: game
        - containerPort: {{ $map.ports.client }}
          name: client
        - containerPort: {{ $map.ports.listen }}
          name: list
        - containerPort: {{ $map.ports.rcon }}
          name: rcon


        volumeMounts:
        - name: data
          mountPath: /app


  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ $map.storage.storageClassName }}
      resources:
        requests:
          storage: 1Gi
---
{{- end}}